<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in WorkMapper writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->

<mapper namespace="org.apache.guacamole.auth.jdbc.work.WorkMapper" >

    <!-- Result mapper for work objects -->
    <resultMap id="WorkResultMap" type="org.apache.guacamole.auth.jdbc.work.WorkModel" >

        <!-- Work properties -->
        <id     column="work_id"            property="objectID"              jdbcType="INTEGER"/>
        <result column="work_idm_id"        property="idmIdentifier"         jdbcType="VARCHAR"/>
        <result column="work_name"          property="name"                  jdbcType="VARCHAR"/>

        <!-- Arbitrary attributes -->
        <collection property="arbitraryAttributes" resultSet="arbitraryAttributes"
                    ofType="org.apache.guacamole.auth.jdbc.base.ArbitraryAttributeModel"
                    column="work_id" foreignColumn="work_id">
            <result property="name"     column="attribute_name"  jdbcType="VARCHAR"/>
            <result property="value"    column="attribute_value" jdbcType="VARCHAR"/>
        </collection>

        <!-- Work periods -->
        <collection property="workPeriods" resultSet="workPeriods"
                    ofType="org.apache.guacamole.auth.jdbc.work.WorkPeriodModel"
                    column="work_id" foreignColumn="work_id">
            <result property="startTime" column="work_start_time" jdbcType="TIME"/>
            <result property="endTime"   column="work_end_time"   jdbcType="TIME"/>
            <result property="validFrom" column="work_valid_from" jdbcType="DATE"/>
            <result property="validUntil" column="work_valid_until" jdbcType="DATE"/>
        </collection>

        <!-- Connection identifiers -->
        <collection property="connectionIdentifiers" resultSet="connectionIdentifiers"
                    ofType="string" >
            <result property="value" column="connection_id" jdbcType="INTEGER"/>
        </collection>

    </resultMap>

    <!-- Select all work identifiers -->
    <select id="selectIdentifiers" resultType="string">
        SELECT work_id 
        FROM guacamole_work
    </select>

    <!--
      * SQL fragment which lists the IDs of all works readable by the
      * entity having the given entity ID. If group identifiers are provided,
      * the IDs of the entities for all groups having those identifiers are
      * tested, as well. Disabled groups are ignored.
      *
      * @param entityID
      *     The ID of the specific entity to test against.
      *
      * @param groups
      *     A collection of group identifiers to additionally test against.
      *     Though this functionality is optional, a collection must always be
      *     given, even if that collection is empty.
      -->
    <sql id="getReadableIDs">
        SELECT DISTINCT work_id
        FROM guacamole_work_permission
        WHERE
            <include refid="org.apache.guacamole.auth.jdbc.base.EntityMapper.isRelatedEntity">
                <property name="column"   value="entity_id"/>
                <property name="entityID" value="${entityID}"/>
                <property name="groups"   value="${groups}"/>
            </include>
            AND permission = 'READ'
    </sql>

    <!-- Select identifiers of all readable works -->
    <select id="selectReadableIdentifiers" resultType="string">
        <include refid="org.apache.guacamole.auth.jdbc.work.WorkMapper.getReadableIDs">
            <property name="entityID" value="#{user.entityID,jdbcType=INTEGER}"/>
            <property name="groups"   value="effectiveGroups"/>
        </include>
    </select>

    <!-- Select multiple works by identifier -->
    <select id="select" resultMap="WorkResultMap"
            resultSets="works,arbitraryAttributes,workPeriods,connectionIdentifiers">

        SELECT
            work_id,
            work_idm_id,
            work_name
        FROM guacamole_work
        WHERE guacamole_work.work_id IN
            <foreach collection="identifiers" item="identifier"
                     open="(" separator="," close=")">
                #{identifier,jdbcType=INTEGER}::integer
            </foreach>
        GROUP BY guacamole_work.work_id;

        SELECT
            work_id,
            attribute_name,
            attribute_value
        FROM guacamole_work_attribute
        WHERE work_id IN
            <foreach collection="identifiers" item="identifier"
                     open="(" separator="," close=")">
                #{identifier,jdbcType=INTEGER}::integer
            </foreach>;

        SELECT
            work_start_time,
            work_end_time,
            work_valid_from,
            work_valid_until
        FROM guacamole_work_period
        WHERE work_id IN
            <foreach collection="identifiers" item="identifier"
                     open="(" separator="," close=")">
                #{identifier,jdbcType=INTEGER}::integer
            </foreach>;

        SELECT
            connection_id
        FROM guacamole_works_connections
        WHERE work_id IN
            <foreach collection="identifiers" item="identifier"
                     open="(" separator="," close=")">
                #{identifier,jdbcType=INTEGER}::integer
            </foreach>;

    </select>

    <!-- Select multiple works by identifier only if readable -->
    <select id="selectReadable" resultMap="WorkResultMap"
            resultSets="works,arbitraryAttributes,workPeriods,connectionIdentifiers">

        SELECT
            work_id,
            work_idm_id,
            work_name
        FROM guacamole_work
        WHERE guacamole_work.work_id IN
            <foreach collection="identifiers" item="identifier"
                     open="(" separator="," close=")">
                #{identifier,jdbcType=INTEGER}::integer
            </foreach>
            AND guacamole_work.work_id IN (
                <include refid="org.apache.guacamole.auth.jdbc.work.WorkMapper.getReadableIDs">
                    <property name="entityID" value="#{user.entityID,jdbcType=INTEGER}"/>
                    <property name="groups"   value="effectiveGroups"/>
                </include>
            )
        GROUP BY guacamole_work.work_id;

        SELECT
            guacamole_work_attribute.work_id,
            attribute_name,
            attribute_value
        FROM guacamole_work_attribute
        WHERE guacamole_work_attribute.work_id IN
            <foreach collection="identifiers" item="identifier"
                     open="(" separator="," close=")">
                #{identifier,jdbcType=INTEGER}::integer
            </foreach>
            AND guacamole_work_attribute.work_id IN (
                <include refid="org.apache.guacamole.auth.jdbc.work.WorkMapper.getReadableIDs">
                    <property name="entityID" value="#{user.entityID,jdbcType=INTEGER}"/>
                    <property name="groups"   value="effectiveGroups"/>
                </include>
            );

        SELECT
            work_start_time,
            work_end_time,
            work_valid_from,
            work_valid_until
        FROM guacamole_work_period
        WHERE work_id IN
            <foreach collection="identifiers" item="identifier"
                     open="(" separator="," close=")">
                #{identifier,jdbcType=INTEGER}::integer
            </foreach>;
            AND guacamole_work_period.work_id IN (
                <include refid="org.apache.guacamole.auth.jdbc.work.WorkMapper.getReadableIDs">
                    <property name="entityID" value="#{user.entityID,jdbcType=INTEGER}"/>
                    <property name="groups"   value="effectiveGroups"/>
                </include>
            );

        SELECT
            connection_id
        FROM guacamole_works_connections
        WHERE work_id IN
            <foreach collection="identifiers" item="identifier"
                     open="(" separator="," close=")">
                #{identifier,jdbcType=INTEGER}::integer
            </foreach>;
            AND guacamole_works_connections.work_id IN (
                <include refid="org.apache.guacamole.auth.jdbc.work.WorkMapper.getReadableIDs">
                    <property name="entityID" value="#{user.entityID,jdbcType=INTEGER}"/>
                    <property name="groups"   value="effectiveGroups"/>
                </include>
            );

    </select>

    <!-- Delete single work by identifier -->
    <delete id="delete">
        DELETE FROM guacamole_work
        WHERE work_id = #{identifier,jdbcType=INTEGER}::integer
    </delete>

    <!-- Insert single work -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="object.objectID"
            parameterType="org.apache.guacamole.auth.jdbc.work.WorkModel">

        INSERT INTO guacamole_work (
            work_idm_id,
            work_name
        )
        VALUES (
            #{object.idmIdentifier,jdbcType=VARCHAR},
            #{object.name,jdbcType=VARCHAR}
        )

    </insert>

    <!-- Update single work -->
    <update id="update" parameterType="org.apache.guacamole.auth.jdbc.work.WorkModel">
        UPDATE guacamole_work
        SET work_idm_id          = #{object.idmIdentifier,jdbcType=VARCHAR},
            work_name            = #{object.name,jdbcType=VARCHAR}
        WHERE work_id = #{object.objectID,jdbcType=INTEGER}
    </update>

    <!-- Delete attributes associated with work -->
    <delete id="deleteAttributes">
        DELETE FROM guacamole_work_attribute
        WHERE work_id = #{object.objectID,jdbcType=INTEGER}::integer
    </delete>

    <!-- Insert attributes for work -->
    <insert id="insertAttributes" parameterType="org.apache.guacamole.auth.jdbc.base.ArbitraryAttributeModel">
        INSERT INTO guacamole_work_attribute (
            work_id,
            attribute_name,
            attribute_value
        )
        VALUES
            <foreach collection="object.arbitraryAttributes" item="attribute" separator=",">
                (#{object.objectID,jdbcType=INTEGER}::integer,
                 #{attribute.name,jdbcType=VARCHAR},
                 #{attribute.value,jdbcType=VARCHAR})
            </foreach>
    </insert>

    <!-- Delete periods associated with work -->
    <delete id="deletePeriods">
        DELETE FROM guacamole_work_period
        WHERE work_id = #{object.objectID,jdbcType=INTEGER}::integer
    </delete>

    <!-- Insert periods for work -->
    <insert id="insertPeriods" parameterType="org.apache.guacamole.auth.jdbc.work.WorkPeriodModel">
        INSERT INTO guacamole_work_period (
            work_id,
            work_start_time,
            work_end_time,
            work_valid_from,
            work_valid_until
        )
        VALUES
            <foreach collection="object.workPeriods" item="period" separator=",">
                (#{object.objectID,jdbcType=INTEGER}::integer,
                 #{period.startTime,jdbcType=TIME},
                 #{period.endTime,jdbcType=TIME},
                 #{period.validFrom,jdbcType=DATE},
                 #{period.validUntil,jdbcType=DATE})
            </foreach>
    </insert>

    <!-- Delete connections associated with work -->
    <delete id="deleteConnections">
        DELETE FROM guacamole_works_connections
        WHERE work_id = #{object.objectID,jdbcType=INTEGER}::integer
    </delete>

    <!-- Insert connections for work -->
    <insert id="insertConnections" parameterType="org.apache.guacamole.auth.jdbc.work.WorkModel">
        INSERT INTO guacamole_works_connections (
            work_id,
            connection_id
        )
        VALUES
            <foreach collection="object.connectionIdentifiers" item="connectionIdentifier" separator=",">
                (#{object.objectID,jdbcType=INTEGER}::integer,
                 #{connectionIdentifier,jdbcType=INTEGER}::integer)
            </foreach>
    </insert>

</mapper>
